'use strict';

/*describe('Controller: ArticleDetailCtrl', function () {
  var dailyJSFeed;

  // load the controller's module
  beforeEach(module('ngswipeDemoApp'));

  var MainCtrl,
    scope;

  var $httpBackend, feeds;

  // Initialize the controller and a mock scope
  beforeEach(inject(function ($controller, $rootScope, $injector) {
    scope = $rootScope.$new();
    
    $httpBackend = $injector.get('$httpBackend');
    feeds = {fetch: function () { return []}};
    $httpBackend.when('GET', "http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20xml%20where%20url%3D'http%3A%2F%2Fdailyjs.com%2Fatom.xml'%20and%20itemPath%3D'feed'&format=json&diagnostics=true&callback=JSON_CALLBACK").respond(dailyJSFeed);

    ArticleDetailCtrl = $controller('ArticleDetailCtrl', {
      $scope: scope,
      feeds: feeds
    });
  }));

  it('should provide some feeds', function () {
    expect(scope.feeds.length).to.be.greaterThan(0);
  });

  // dailyJSFeed = {"query":{"count":1,"created":"2013-05-01T20:26:33Z","lang":"en-US","diagnostics":{"publiclyCallable":"true","url":{"execution-start-time":"1","execution-stop-time":"934","execution-time":"933","proxy":"DEFAULT","content":"http://dailyjs.com/atom.xml"},"user-time":"937","service-time":"933","build-version":"36288"},"results":{"feed":{"xmlns":"http://www.w3.org/2005/Atom","title":"DailyJS","link":[{"href":"http://dailyjs.com/feed.xml","rel":"self"},{"href":"http://dailyjs.com"}],"updated":"2013-05-01T17:15:17+01:00","id":"http://dailyjs.com/","author":{"name":"DailyJS"},"entry":[{"title":"Node Roundup: Caterpillar, squel, mongoose-currency","link":{"href":"http://dailyjs.com/2013/05/01/node-roundup"},"updated":"2013-05-01T00:00:00+01:00","id":"http://dailyjs.com/2013/05/01/node-roundup","content":{"type":"html","content":"\n     <div class='intro'>\nYou can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.\n</div>\n<h3 id='caterpillar'>Caterpillar</h3>\n\n<p>Benjamin Lupton sent in Caterpillar (GitHub: <a href='https://github.com/bevry/caterpillar'>bevry / caterpillar</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/caterpillar'>caterpillar</a>), which is a logging system. It supports RFC-standard log levels, but the main reason I thought it was interesting is it&#8217;s based around the <em>streams2</em> API.</p>\n\n<p>By piping a Caterpillar stream through a suitable instance of <code>stream.Transform</code>, you can do all kinds of cool things. For example, <a href='https://github.com/bevry/caterpillar-filter'>caterpillar-filter</a> can filter out unwanted log levels, and <a href='https://github.com/bevry/caterpillar-human'>caterpillar-human</a> adds fancy colours.</p>\n\n<h3 id='squel'>squel</h3>\n\n<p>I was impressed by Brian Carlson&#8217;s <a href='https://npmjs.org/package/sql'>sql</a> module, and Ramesh Nair sent in squel (GitHub: <a href='https://github.com/hiddentao/squel'>hiddentao / squel</a>, License: <em>BSD</em>, npm: <a href='https://github.com/hiddentao/squel'>squel</a>) which is a similar project. This SQL builder module supports non-standard queries, and has good test coverage with Mocha.</p>\n\n<p>Ramesh has included some client-side examples as well, which sounds dangerous but may find uses, perhaps by generating SQL fragments to be used by an API that safely escapes them, or for generating documentation examples.</p>\n\n<h3 id='mongoosecurrency'>mongoose-currency</h3>\n\n<p>mongoose-currency (GitHub: <a href='https://github.com/catalystmediastudios/mongoose-currency'>catalystmediastudios / mongoose-currency</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/mongoose-currency'>mongoose-currency</a>) by Paul Smith adds currency support to Mongoose. Money values are stored as an integer that represents the lowest unit of currency (pence, cents). Input can be a string that contains a currency symbol, commas, and a decimal.</p>\n\n<p>The <code>Currency</code> type works by stripping non-numerical characters. I&#8217;m not sure if this will work for regions where numbers use periods or spaces to separate groups of digits &#8211; it seems like this module would require localisation support to safely support anything other than dollars.</p>\n\n<p>Paul has included unit tests written with Mocha, so it could be extended to support localised representations of currencies.</p>\n   "}},{"title":"jQuery Roundup: Sco.js, Datepicker Skins, LocationHandler","link":{"href":"http://dailyjs.com/2013/04/30/jquery-roundup"},"updated":"2013-04-30T00:00:00+01:00","id":"http://dailyjs.com/2013/04/30/jquery-roundup","content":{"type":"html","content":"\n     <div class='intro'>\nNote: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.\n</div>\n<h3 id='scojs'>Sco.js</h3>\n\n<p><a href='http://terebentina.github.io/sco.js/'>Sco.js</a> (GitHub: <a href='https://github.com/terebentina/sco.js'>terebentina / sco.js</a>, License: <em>Apache 2.0</em>) by Dan Caragea is a collection of Bootstrap components. They can be dropped into an existing Bootstrap project, or used separately as well.</p>\n\n<p>Some of the plugins are replacements of the Bootstrap equivalents, but prefixed with <code>$.scojs_</code>. There are also a few plugins that are unique to Sco.js, like <code>$.scojs_valid</code> for validating forms, and <code>$.scojs_countdown</code> for displaying a stopwatch-style timer.</p>\n\n<p>In cases where Sco.js replaces Bootstrap plugins, the author has been motivated by simplifying the underlying markup and reducing the reliance on IDs.</p>\n\n<p>Dan has included tests, and full documentation for each plugin.</p>\n\n<h3 id='jquery_datepicker_skins'>jQuery Datepicker Skins</h3>\n\n<p><img src='http://dailyjs.com/images/posts/jquery-datepicker-skins.png' alt='jQuery datepicker skins' /></p>\n\n<p>Artan Sinani sent in these <a href='http://rtsinani.github.io/jquery-datepicker-skins/'>jQuery datepicker skins</a> (GitHub: <a href='https://github.com/rtsinani/jquery-datepicker-skins'>rtsinani / jquery-datepicker-skins</a>). They&#8217;re tested with jQuery UI v1.10.1 and jQuery 1.9.1, so they should work with new projects quite nicely.</p>\n\n<h3 id='locationhandler'>LocationHandler</h3>\n\n<p>LocationHandler (GitHub: <a href='https://github.com/slv/LocationHandler'>slv / LocationHandler</a>) by Michele Salvini is a plugin for managing pushState and onpopstate. It emits events for various stages of the history change life cycle. Each supported state is documented in the readme, but the basic usage looks like this:</p>\n<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>).</span><span class='nx'>ready</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>\n  <span class='kd'>var</span> <span class='nx'>locationHandler</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>LocationHandler</span><span class='p'>({</span>\n    <span class='nx'>locationWillChange</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>change</span><span class='p'>)</span> <span class='p'>{</span>\n    <span class='p'>},</span>\n    <span class='nx'>locationDidChange</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>change</span><span class='p'>)</span> <span class='p'>{</span>\n    <span class='p'>}</span>\n  <span class='p'>});</span>\n<span class='p'>});</span>\n</code></pre>\n</div>\n<p>The <code>change</code> object has properties for the from/to URLs, and page titles as well.</p>\n   "}},{"title":"Packery, Gumba, watch-array","link":{"href":"http://dailyjs.com/2013/04/29/packery-gumba-watch-array"},"updated":"2013-04-29T00:00:00+01:00","id":"http://dailyjs.com/2013/04/29/packery-gumba-watch-array","content":{"type":"html","content":"\n     <h3 id='packery'>Packery</h3>\n\n<p><img src='http://dailyjs.com/images/posts/packery.png' alt='Packery' /></p>\n\n<p>Victor sent in <a href='http://packery.metafizzy.co/'>Packery</a> (GitHub: <a href='https://github.com/metafizzy/packery'>metafizzy / packery</a>, License: <em>MIT/Commercial</em>, bower: <em>packery</em>) from Metafizzy, which is a <a href='http://en.wikipedia.org/wiki/Bin_packing_problem'>bin packing</a> library. It organises elements to fit around the space available. Certain elements can be &#8220;stamped&#8221; into a specific position, fit an ideal spot, or be <a href='http://packery.metafizzy.co/draggable.html'>draggable</a>.</p>\n\n<p>Packery can be configured in JavaScript using the <code>Packery</code> constructor function, or purely in HTML using a class and data attributes. jQuery is not required, but the project does have some dependencies, so the authors recommend installation with Bower.</p>\n\n<p>The project can be used under the MIT license, but commercial projects require <a href='http://packery.metafizzy.co/license.html'>a license that starts at $25</a>.</p>\n\n<h3 id='gumba'>Gumba</h3>\n\n<p><a href='http://gumba.welldan97.com/'>Gumba</a> (GitHub: <a href='https://github.com/welldan97/gumba'>welldan97 / gumba</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/gumba'>gumba</a>) by Dmitry Yakimov is CoffeeScript for the command-line:</p>\n<div class='highlight'><pre><code class='text'>$ echo &#39;1234567&#39; | gumba &#39;toNumber().numberFormat()&#39;\n1,234,567\n</code></pre>\n</div>\n<p>It&#8217;s a bit like Awk or sed, but for the chainable text operations supported by CoffeeScript and <a href='https://github.com/epeli/underscore.string'>Underscore.string</a>.</p>\n\n<h3 id='watcharray'>watch-array</h3>\n\n<p>watch-array (GitHub: <a href='https://github.com/azer/watch-array'>azer / watch-array</a>, License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/watch-array'>watch-array</a>) by Azer Koçulu causes arrays to emit events when mutator methods are used. Usage is simple &#8211; just call <code>watchArray</code> on an array, and pass it a callback that will be triggered when the array changes:</p>\n<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>watchArray</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;watch-array&#39;</span><span class='p'>);</span>\n<span class='kd'>var</span> <span class='nx'>people</span> <span class='o'>=</span> <span class='p'>[</span><span class='s1'>&#39;Joe&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Smith&#39;</span><span class='p'>];</span>\n\n<span class='nx'>watchArray</span><span class='p'>(</span><span class='nx'>people</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>update</span><span class='p'>)</span> <span class='p'>{</span>\n  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>update</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>);</span>\n  <span class='c1'>// =&gt; { 1: Taylor, 2: Brown }</span>\n\n  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>update</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>);</span>\n  <span class='c1'>// =&gt; [0]</span>\n<span class='p'>});</span>\n\n<span class='nx'>people</span><span class='p'>.</span><span class='nx'>shift</span><span class='p'>();</span>\n<span class='nx'>people</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='s1'>&#39;Taylor&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Brown&#39;</span><span class='p'>);</span>\n</code></pre>\n</div>\n<p>In a way this is like a micro version of what data binding frameworks implement. The author has included tests written with his <a href='https://github.com/azer/fox'>fox</a> test framework.</p>\n   "}},{"title":"Yeoman Configstore, Debug.js, Sublime JavaScript Refactoring","link":{"href":"http://dailyjs.com/2013/04/26/configstore-debug-sublime"},"updated":"2013-04-26T00:00:00+01:00","id":"http://dailyjs.com/2013/04/26/configstore-debug-sublime","content":{"type":"html","content":"\n     <h3 id='configstore'>Configstore</h3>\n\n<p>Sindre Sorhus sent in configstore (GitHub: <a href='https://github.com/yeoman/configstore'>yeoman / configstore</a>, License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/configstore'>configstore</a>), a small module for storing configuration variables without worrying about where and how. The underlying data file is YAML, and stored in <code>$XDG_CONFIG_HOME</code>.</p>\n\n<p><code>Configstore</code> instances are used with a simple API for getting, setting, and deleting values:</p>\n<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Configstore</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;configstore&#39;</span><span class='p'>);</span>\n<span class='kd'>var</span> <span class='nx'>packageName</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./package&#39;</span><span class='p'>).</span><span class='nx'>name</span><span class='p'>;</span>\n\n<span class='kd'>var</span> <span class='nx'>conf</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Configstore</span><span class='p'>(</span><span class='nx'>packageName</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>foo</span><span class='o'>:</span> <span class='s1'>&#39;bar&#39;</span> <span class='p'>});</span>\n\n<span class='nx'>conf</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;awesome&#39;</span><span class='p'>,</span> <span class='kc'>true</span><span class='p'>);</span>\n<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>conf</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;awesome&#39;</span><span class='p'>));</span>  <span class='c1'>// true</span>\n<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>conf</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;foo&#39;</span><span class='p'>));</span>      <span class='c1'>// bar</span>\n\n<span class='nx'>conf</span><span class='p'>.</span><span class='nx'>del</span><span class='p'>(</span><span class='s1'>&#39;awesome&#39;</span><span class='p'>);</span>\n<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>conf</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;awesome&#39;</span><span class='p'>));</span>  <span class='c1'>// undefined</span>\n</code></pre>\n</div>\n<p>The <a href='https://github.com/yeoman'>Yeoman repository on GitHub</a> has many more interesting server-side and client-side modules &#8211; currently most projects are related to client-side workflow, but given the discussions on <a href='https://plus.google.com/101063139999404044459/posts'>Yeoman&#8217;s Google+</a> account I expect there will be an increasing number of server-side modules too.</p>\n\n<h3 id='debugjs'>Debug.js</h3>\n\n<p>Jerome Etienne has appeared on DailyJS a few times with his WebGL libraries and tutorials. He recently released <a href='http://blog.jetienne.com/blog/2013/04/23/debug-dot-js-global-detection/'>debug.js</a> (GitHub: <a href='https://github.com/jeromeetienne/debug.js'>jeromeetienne / debug.js</a>, License: <em>MIT</em>), which is a set of tools for browser and Node JavaScript debugging.</p>\n\n<p>The tutorial focuses on global leak detection, which is able to display a trace that shows where the leak originated. Another major feature is strong type checking for properties and function arguments.</p>\n\n<p>Methods can also be marked as deprecated, allowing debug.js to generate notifications when such methods are accessed.</p>\n\n<p>More details can be found on the <a href='http://jeromeetienne.github.io/debug.js/'>debug.js</a> project page.</p>\n\n<h3 id='sublime_text_refactoring_plugin'>Sublime Text Refactoring Plugin</h3>\n\n<p>Stephan Ahlf sent in his <a href='http://saquery.com/sublime-text-refactoring-plugin/'>Sublime Text Refactoring Plugin</a> (GitHub: <a href='https://github.com/s-a/sublime-text-refactor'>s-a / sublime-text-refactor</a>, License: <em>MIT/GPL</em>). The main features are method extraction, variable and function definition navigation, and renaming based on scope.</p>\n\n<p>The plugin uses Node, and has some unit tests written in Mocha. The author is planning to add more features (the readme has a to-do list).</p>\n   "}},{"title":"AngularJS: Rendering Feeds","link":{"href":"http://dailyjs.com/2013/04/25/angularjs-3"},"updated":"2013-04-25T00:00:00+01:00","id":"http://dailyjs.com/2013/04/25/angularjs-3","content":{"type":"html","content":"\n     <ul class='parts'>\n  <li><a href='http://dailyjs.com/2013/04/11/angularjs-1/'>Part 1: Google, Twitter, and AngularJS</a></li>\n  <li><a href='http://dailyjs.com/2013/04/18/angularjs-2/'>Part 2: Let's Make a Feed Reader</a></li>\n  <li><a href='http://dailyjs.com/2013/04/25/angularjs-3/'><strong>Part 3: Rendering Feeds</strong></a></li>\n</ul>\n<h3 id='previously'>Previously</h3>\n\n<p>In last week&#8217;s part I introduced Yeoman and we created a template project that included AngularJS. You can get the source at <a href='https://github.com/alexyoung/djsreader'>alexyoung / djsreader</a>. The commit was <code>2e15d97</code>.</p>\n\n<h3 id='workflow'>Workflow</h3>\n\n<p>The workflow with Yeoman is based around Grunt. Prior to Yeoman, many developers had adopted a similar approach &#8211; a lightweight web server was started up using Node and Connect, and a filesystem watcher was used to rebuild the client-side assets whenever a file was edited.</p>\n\n<p>Yeoman bundles all of this up for you so you don&#8217;t need to reinvent it. When working on a Yeoman project, type <code>grunt server</code> to start a web server in development mode.</p>\n\n<p>This should open a browser window at <code>http://localhost:9000/#/</code> with a welcome message. Now the web server is running, you can edit files under <code>app/</code>, and Grunt will rebuild your project as required.</p>\n\n<h3 id='key_components_controllers_and_views'>Key Components: Controllers and Views</h3>\n\n<p>The goal of this tutorial is to make something that can download a feed and render it &#8211; all using client-side code. AngularJS can do all of this, with the help of YQL for mapping an RSS/Atom feed to JSON.</p>\n\n<p>This example is an excellent &#8220;soft&#8221; introduction to AngularJS because it involves several of the key components:</p>\n\n<ul>\n<li><a href='http://docs.angularjs.org/guide/dev_guide.mvc.understanding_controller'>Controllers</a>, for combining the data and views</li>\n\n<li><a href='http://docs.angularjs.org/guide/dev_guide.mvc.understanding_view'>Views</a>, for rendering the articles returned by the service</li>\n\n<li><a href='http://docs.angularjs.org/guide/dev_guide.services.understanding_services'>Services</a>, for fetching the JSON data</li>\n</ul>\n\n<p>The Yeoman template project already contains a view and controller. The controller can be found in <code>app/scripts/controllers/main.js</code>, and the view is in <code>app/views/main.html</code>.</p>\n\n<p>If you take a look at these files, it&#8217;s pretty obvious what&#8217;s going on: the controller sets some values that are then used by the template. The template is able to iterate over the values that are set by using the <a href='http://docs.angularjs.org/api/ng.directive:ngRepeat'>ng-repeat</a> directive.</p>\n\n<h3 id='directives_and_data_binding'>Directives and Data Binding</h3>\n\n<p><a href='http://docs.angularjs.org/guide/directive'>Directives</a> can be used to transform the DOM, so the <code>main.html</code> file is a dynamic template that is interpolated at runtime.</p>\n\n<p>The way in which data is bound to a template is through <a href='http://docs.angularjs.org/guide/scope'>scopes</a>. The <code>$scope</code> object, which is passed to the controller, will cause the template to be updated when it is changed. This is actually asynchronous:</p>\n\n<blockquote>\n<p>Scope is the glue between application controller and the view. During the template linking phase the directives set up <code>$watch</code> expressions on the scope. The <code>$watch</code> allows the directives to be notified of property changes, which allows the directive to render the updated value to the DOM.</p>\n</blockquote>\n\n<p>Notice how the view is updated when <em>properties</em> change. That means the property assignment to <code>$scope</code> in the template app will be reflected by the template.</p>\n\n<p>If you&#8217;re of an inquisitive nature, you&#8217;re probably wondering how the controller gets instantiated and associated with the view. There&#8217;s a missing piece of the story here that I haven&#8217;t mentioned yet: <em>routing</em>.</p>\n\n<h3 id='router_providers'>Router Providers</h3>\n\n<p>The <code>MainCtrl</code> (main controller) is bound to <code>views/main.html</code> in <code>app/scripts/app.js</code>:</p>\n<div class='highlight'><pre><code class='javascript'><span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s1'>&#39;djsreaderApp&#39;</span><span class='p'>,</span> <span class='p'>[])</span>\n  <span class='p'>.</span><span class='nx'>config</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>$routeProvider</span><span class='p'>)</span> <span class='p'>{</span>\n    <span class='nx'>$routeProvider</span>\n      <span class='p'>.</span><span class='nx'>when</span><span class='p'>(</span><span class='s1'>&#39;/&#39;</span><span class='p'>,</span> <span class='p'>{</span>\n        <span class='nx'>templateUrl</span><span class='o'>:</span> <span class='s1'>&#39;views/main.html&#39;</span><span class='p'>,</span>\n        <span class='nx'>controller</span><span class='o'>:</span> <span class='s1'>&#39;MainCtrl&#39;</span>\n      <span class='p'>})</span>\n      <span class='p'>.</span><span class='nx'>otherwise</span><span class='p'>({</span>\n        <span class='nx'>redirectTo</span><span class='o'>:</span> <span class='s1'>&#39;/&#39;</span>\n      <span class='p'>});</span>\n  <span class='p'>});</span>\n</code></pre>\n</div>\n<p>The <code>$routeProvider</code> uses a promise-based API for mapping URLs to controllers and templates. This file is a centralised configuration file that sets up the application.</p>\n\n<p>The line that reads <code>angular.module</code> sets up a new &#8220;module&#8221; called <code>djsreaderApp</code>. This isn&#8217;t technically the same as a Node module or RequireJS module, but it&#8217;s very similar &#8211; <a href='http://docs.angularjs.org/api/angular.module'>modules</a> are registered in a global namespace so they can be referenced throughout an application. That includes third-party modules as well.</p>\n\n<h3 id='fetching_feeds'>Fetching Feeds</h3>\n\n<p>To load feeds, we can use the <code>$http</code> service. But even better&#8230; it supports JSONP, which is how the Yahoo! API provides cross-domain access to the data we want to fetch. Open <code>app/scripts/controllers/main.js</code> and change it to load the (extremely long) YQL URL:</p>\n<div class='highlight'><pre><code class='javascript'><span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s1'>&#39;djsreaderApp&#39;</span><span class='p'>)</span>\n  <span class='p'>.</span><span class='nx'>controller</span><span class='p'>(</span><span class='s1'>&#39;MainCtrl&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>$scope</span><span class='p'>,</span> <span class='nx'>$http</span><span class='p'>)</span> <span class='p'>{</span>\n    <span class='kd'>var</span> <span class='nx'>url</span> <span class='o'>=</span> <span class='s2'>&quot;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20xml%20where%20url%3D&#39;http%3A%2F%2Fdailyjs.com%2Fatom.xml&#39;%20and%20itemPath%3D&#39;feed.entry&#39;&amp;format=json&amp;diagnostics=true&amp;callback=JSON_CALLBACK&quot;</span><span class='p'>;</span>\n\n    <span class='nx'>$http</span><span class='p'>.</span><span class='nx'>jsonp</span><span class='p'>(</span><span class='nx'>url</span><span class='p'>).</span>\n      <span class='nx'>success</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>,</span> <span class='nx'>status</span><span class='p'>,</span> <span class='nx'>headers</span><span class='p'>,</span> <span class='nx'>config</span><span class='p'>)</span> <span class='p'>{</span>\n        <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>feed</span> <span class='o'>=</span> <span class='p'>{</span>\n          <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;DailyJS&#39;</span><span class='p'>,</span>\n          <span class='nx'>items</span><span class='o'>:</span> <span class='nx'>data</span><span class='p'>.</span><span class='nx'>query</span><span class='p'>.</span><span class='nx'>results</span><span class='p'>.</span><span class='nx'>entry</span>\n        <span class='p'>};</span>\n      <span class='p'>}).</span>\n      <span class='nx'>error</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>,</span> <span class='nx'>status</span><span class='p'>,</span> <span class='nx'>headers</span><span class='p'>,</span> <span class='nx'>config</span><span class='p'>)</span> <span class='p'>{</span>\n        <span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='s1'>&#39;Error fetching feed:&#39;</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>);</span>\n      <span class='p'>});</span>\n  <span class='p'>});</span>\n</code></pre>\n</div>\n<p>The second line has changed to include a reference to <code>$http</code> &#8211; this allows us to access Angular&#8217;s built-in HTTP module.</p>\n\n<p>The <code>$scope</code> is now updated with the result of the JSONP request. When <code>$scope.feed</code> is set, AngularJS will automatically update the view with the new values.</p>\n\n<p>Now the view needs to be updated to display the feed items.</p>\n\n<h3 id='rendering_feed_items'>Rendering Feed Items</h3>\n\n<p>To render the feed items, open <code>app/views/main.html</code> and use the <code>ng-repeat</code> directive to iterate over each item and display it:</p>\n<div class='highlight'><pre><code class='html'><span class='nt'>&lt;h1&gt;&lt;/h1&gt;</span>\n<span class='nt'>&lt;ul&gt;</span>\n  <span class='nt'>&lt;li</span> <span class='na'>ng-repeat=</span><span class='s'>&quot;item in feed.items&quot;</span><span class='nt'>&gt;&lt;/li&gt;</span>\n<span class='nt'>&lt;/ul&gt;</span>\n</code></pre>\n</div>\n<p>This will now render the title of each feed entry. If you&#8217;re running <code>grunt server</code> you should have found that whenever a file was saved it caused the browser window to refresh. That means your changes should be visible, and you should see the recent stories from DailyJS.</p>\n<div class='image'>\n  <img src='http://dailyjs.com/images/posts/angular-feed.png' alt='AngularJS feed rendering' />\n  <small>What you should see...</small>\n</div>\n<h3 id='conclusion'>Conclusion</h3>\n\n<p>In this brief tutorial you&#8217;ve seen Angular controllers, views, directives, data binding, and even routing. If you&#8217;ve written much Backbone.js or Knockout before then you should be starting to see how AngularJS implements similar concepts. It takes a different approach &#8211; I found <code>$scope</code> a little bit confusing at first for example, but the initial learning curve is mainly down to learning terminology.</p>\n\n<p>If you&#8217;ve had trouble getting any of this working, try checkout out my source on GitHub. The commit for this tutorial was <a href='https://github.com/alexyoung/djsreader/tree/73af5543e323c9faef37ff2e4c158231f8374512'>73af554</a>.</p>\n   "}},{"title":"Node Roundup: 0.10.5, Node Task, cap","link":{"href":"http://dailyjs.com/2013/04/24/node-roundup"},"updated":"2013-04-24T00:00:00+01:00","id":"http://dailyjs.com/2013/04/24/node-roundup","content":{"type":"html","content":"\n     <div class='intro'>\nYou can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.\n</div>\n<h3 id='node_0105'>Node 0.10.5</h3>\n\n<p><a href='http://blog.nodejs.org/2013/04/23/node-v0-10-5-stable/'>Node 0.10.5</a> is out. Apparently it now builds under Visual Studio 2012.</p>\n\n<p>One small change I noticed was added by Ryan Doenges, where the assert module now puts information into the <code>message</code> property:</p>\n\n<blockquote>\n<p>4716dc6 made <code>assert.equal()</code> and related functions work better by generating a better <code>toString()</code> from the expected, actual, and operator values passed to <code>fail()</code>. Unfortunately, this was accomplished by putting the generated message into the error&#8217;s name property. When you passed in a custom error message, the error would put the custom error into name and message, resulting in helpful string representations like <code>&quot;AssertionError: Oh no: Oh no&quot;</code>.</p>\n</blockquote>\n\n<p>The <a href='https://github.com/joyent/node/pull/5293'>pull request for this</a> is nice to read (apparently Ryan is only 17, so he got his dad to sign the <em>Contributor License Agreement</em> document).</p>\n\n<h3 id='node_task'>Node Task</h3>\n\n<p><a href='https://github.com/node-task/spec/wiki'>Node Task</a>, sent in by Khalid Khan, is a specification for a promise-based API that wraps around JavaScript tasks. The idea is that tasks used with projects like Grunt should be compatible, and able to be processed through an arbitrary pipeline:</p>\n\n<blockquote>\n<p>Eventually, it is hoped that popular JS libraries will maintain their own node-task modules (think jshint, stylus, handlebars, etc). If/when this happens, it will be trivial to pass files through an arbitrary pipeline of interactions and transformations utilizing libraries across the entire npm ecosystem.</p>\n</blockquote>\n\n<p>After reading through each specification, it seems like an interesting attempt to standardise Grunt-like tasks. The API seems streams-inspired, as it&#8217;s based around EventEmitter2 with various additional methods that are left for implementors to fill in.</p>\n\n<h3 id='cap'>cap</h3>\n\n<p>Brian White sent in his cross-platform packet capturing library, &#8220;cap&#8221; (GitHub: <a href='https://github.com/mscdex/cap'>mscdex / cap</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/cap'>cap</a>). It&#8217;s built using WinPcap for Windows and libpcap and libpcap-dev for Unix-like operating systems.</p>\n\n<p>It&#8217;s time to write your vulnerability scanning tools with Node!</p>\n\n<p>Brian also sent in &#8220;dicer&#8221; (GitHub: <a href='https://github.com/mscdex/dicer'>mscdex / dicer</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/dicer'>dicer</a>), which is a streaming multipart parser. It uses the streams2 base classes and <a href='https://npmjs.org/package/readable-stream'>readable-stream</a> for Node 0.8 support.</p>\n   "}},{"title":"jQuery 2.0 Released","link":{"href":"http://dailyjs.com/2013/04/23/jquery-roundup"},"updated":"2013-04-23T00:00:00+01:00","id":"http://dailyjs.com/2013/04/23/jquery-roundup","content":{"type":"html","content":"\n     <div class='intro'>\nNote: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.\n</div>\n<p><a href='http://blog.jquery.com/2013/04/18/jquery-2-0-released/'>jQuery 2.0</a> has been released. The most significant, headline-grabbing change is the removal of support for legacy browsers, including IE 6, 7, and 8. The 1.x branch will continue to be supported, so it&#8217;s safe to keep using it if you need broad IE support.</p>\n\n<p>The <a href='https://github.com/jquery/jquery-migrate/#readme'>jquery-migrate</a> plugin can be used to help you migrate away from legacy APIs. jQuery 2.0 is &#8220;API compatible&#8221; with 1.9, which means migration shouldn&#8217;t be as painful as it could be. They&#8217;ve been pushing jquery-migrate for a while now, so hopefully this stuff isn&#8217;t new to anyone who likes to keep current with jQuery.</p>\n\n<p>The announcement blog post has more details on IE support, the next release of jQuery, and the benefits of upgrading to 2.0.</p>\n\n<h3 id='upgrade_planning'>Upgrade Planning</h3>\n\n<p>If you&#8217;re interested in upgrading, the <a href='http://api.jquery.com/'>jQuery documentation</a> has notes on each API method that is deprecated. It also documents features that can be used to mitigate API changes &#8211; for example, if you&#8217;re using a plugin that requires an earlier version of jQuery, you could technically run multiple versions on a page by using <a href='http://api.jquery.com/jQuery.noConflict/'>jQuery.noConflict</a>:</p>\n<div class='highlight'><pre><code class='html'><span class='nt'>&lt;script </span><span class='na'>type=</span><span class='s'>&quot;text/javascript&quot;</span> <span class='na'>src=</span><span class='s'>&quot;other_lib.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>\n<span class='nt'>&lt;script </span><span class='na'>type=</span><span class='s'>&quot;text/javascript&quot;</span> <span class='na'>src=</span><span class='s'>&quot;jquery.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>\n<span class='nt'>&lt;script </span><span class='na'>type=</span><span class='s'>&quot;text/javascript&quot;</span><span class='nt'>&gt;</span>\n  <span class='nx'>$</span><span class='p'>.</span><span class='nx'>noConflict</span><span class='p'>();</span>\n  <span class='c1'>// Code that uses another library&#39;s $ can follow here.</span>\n<span class='nt'>&lt;/script&gt;</span>\n</code></pre>\n</div>\n<p>Plugins that are listed on <a href='http://plugins.jquery.com/'>the jQuery Plugin Registry</a> <em>should</em> list the required jQuery version in the <a href='http://plugins.jquery.com/docs/package-manifest/#field-dependencies'>package manifest file</a>. That means you can easily see what version of jQuery a plugin depends on. Many already do depend on jQuery 1.9 or above, so they should be safe to use with jQuery 2.0.</p>\n\n<p>As always, well-tested projects should be easier to migrate. So get those QUnit tests out and see what happens!</p>\n   "}},{"title":"Object.observe Shim, Behave, Snap.js","link":{"href":"http://dailyjs.com/2013/04/22/observe-behave-snap"},"updated":"2013-04-22T00:00:00+01:00","id":"http://dailyjs.com/2013/04/22/observe-behave-snap","content":{"type":"html","content":"\n     <h3 id='objectobserve_shim'>Object.observe Shim</h3>\n\n<p>It&#8217;s encouraging to see Harmony taking on board influences from databinding frameworks, given how important they&#8217;re proving to be to front-end development. The proposed <a href='http://wiki.ecmascript.org/doku.php?id=harmony:observe'>Object.observer API</a> aims to improve the way respond to changes in objects:</p>\n\n<blockquote>\n<p>Today, JavaScript framework which provide databinding typically create objects wrapping the real data, or require objects being databound to be modified to buy in to databinding. The first case leads to increased working set and more complex user model, and the second leads to siloing of databinding frameworks. A solution to this is to provide a runtime capability to observe changes to an object</p>\n</blockquote>\n\n<p>François de Campredon sent in KapIT&#8217;s <a href='https://github.com/KapIT/observe-shim/'>Object.observe shim</a> (GitHub: <a href='https://github.com/KapIT/observe-shim/'>KapIT / observe-shim</a>, License: <em>Apache</em>), which implements the algorithm described by the proposal. It&#8217;s compatible with ECMAScript 5 browsers, and depends on a method called <code>ObserveUtils.defineObservableProperties</code> for setting up the properties you&#8217;re interested in observing. The readme has more documentation and build instructions.</p>\n\n<h3 id='behavejs'>Behave.js</h3>\n\n<p><a href='http://jakiestfu.github.io/Behave.js/'>Behave.js</a> (GitHub: <a href='https://github.com/jakiestfu/Behave.js'>jakiestfu / Behave.js</a>, License: <em>MIT</em>) by Jacob Kelley is library for adding IDE-like behaviour to a <code>textarea</code>. It doesn&#8217;t have any dependencies, and has impressive browser support. Key features include hard and soft tabs, bracket insertion, and automatic and multiline indentation.</p>\n\n<p>Basic usage is simply:</p>\n<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>editor</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Behave</span><span class='p'>({</span>\n  <span class='nx'>textarea</span><span class='o'>:</span> <span class='nb'>document</span><span class='p'>.</span><span class='nx'>getElementById</span><span class='p'>(</span><span class='s1'>&#39;myTextarea&#39;</span><span class='p'>)</span>\n<span class='p'>});</span>\n</code></pre>\n</div>\n<p>There is also a function for binding events to Behave &#8211; the events are all documented in the readme, and include things like key presses and lifecycle events.</p>\n\n<h3 id='snapjs'>Snap.js</h3>\n\n<p><a href='http://jakiestfu.github.io/Snap.js/demo/apps/default.html'>Snap.js</a> (GitHub: <a href='https://github.com/jakiestfu/Snap.js/'>jakiestfu / Snap.js</a>, License: <em>MIT</em>) also by Jacob is another dependency-free UI component. This one is for creating mobile-style navigation menus that appear when clicking a button or dragging the entire view. It uses CSS3 transitions, and has an event-based API so it&#8217;s easy to hook it into existing interfaces.</p>\n\n<p>The drag events use &#8216;slide intent&#8217;, which allows an integer to be specified (<code>slideIntent</code>) to control the angle at which a gesture is considered horizontal. Jacob has included helpful documentation on how to structure and style a suitable layout for the plugin:</p>\n\n<blockquote>\n<p>Two absolute elements, one to represent all the content, and another to represent all the drawers. The content has a higher z-index than the drawers. Within the drawers element, it&#8217;s direct children should represent the containers for the drawers, these should be fixed or absolute.</p>\n</blockquote>\n\n<p>He has lots of other useful client-side projects on <a href='https://github.com/jakiestfu?tab=repositories'>GitHub/jakiestfu</a>.</p>\n   "}},{"title":"LevelDB and Node: What is LevelDB Anyway?","link":{"href":"http://dailyjs.com/2013/04/19/leveldb-and-node-1"},"updated":"2013-04-19T00:00:00+01:00","id":"http://dailyjs.com/2013/04/19/leveldb-and-node-1","content":{"type":"html","content":"\n     <p>This is the first article in a three-part series on LevelDB and how it can be used in Node.</p>\n\n<p>This article will cover the LevelDB basics and internals to provide a foundation for the next two articles. The second and third articles will cover the core LevelDB Node libraries: <a href='https://github.com/rvagg/node-levelup'>LevelUP</a>, <a href='https://github.com/rvagg/node-leveldown'>LevelDOWN</a> and the rest of the LevelDB ecosystem that&#8217;s appearing in Node-land.</p>\n\n<p><img src='http://dailyjs.com/images/posts/leveldb.png' alt='LevelDB' /></p>\n\n<h3 id='what_is_leveldb'>What is LevelDB?</h3>\n\n<p>LevelDB is an <em>open-source</em>, <em>dependency-free</em>, <em>embedded key/value data store</em>. It was developed in 2011 by Jeff Dean and Sanjay Ghemawat, researchers from Google. It&#8217;s written in C++ although it has third-party bindings for most common programming languages. Including JavaScript / Node.js of course.</p>\n\n<p>LevelDB is based on ideas in Google&#8217;s BigTable but does not share code with BigTable, this allows it to be licensed for open source release. Dean and Ghemawat developed LevelDB as a replacement for SQLite as the backing-store for Chrome&#8217;s IndexedDB implementation.</p>\n\n<p>It has since seen very wide adoption across the industry and serves as the back-end to a number of new databases and is now the recommended storage back-end for Riak.</p>\n\n<h3 id='features'>Features</h3>\n\n<ul>\n<li><strong>Arbitrary byte arrays</strong>: both keys and values are treated as simple arrays of bytes, so content can anything from ASCII strings to binary blobs.</li>\n\n<li><strong>Sorted by keys</strong>: by default, LevelDB stores entries lexicographically sorted by keys. The sorting is one of the main distinguishing features of LevelDB amongst similar embedded data storage libraries and comes in very useful for querying as we&#8217;ll see later.</li>\n\n<li><strong>Compressed storage</strong>: Google&#8217;s Snappy compression library is an optional dependency that can decrease the on-disk size of LevelDB stores with minimal sacrifice of speed. Snappy is highly optimised for fast compression and therefore does not provide particularly high compression ratios on common data.</li>\n\n<li><strong>Basic operations: <code>Get()</code>, <code>Put()</code>, <code>Del()</code>, <code>Batch()</code></strong></li>\n</ul>\n\n<h3 id='basic_architecture'>Basic architecture</h3>\n\n<h4 id='log_structured_merge_lsm_tree'>Log Structured Merge (LSM) tree</h4>\n\n<p><img src='http://dailyjs.com/images/posts/leveldb_simple.png' alt='LSM' /></p>\n\n<p>All writes to a LevelDB store go straight into a <strong>log</strong> and a &#8220;memtable&#8221;. The log is regularly <strong>flushed</strong> into sorted string table files (SST) where the data has a more permanent home.</p>\n\n<p>Reads on a data store <strong>merge</strong> these two distinct data structures, the log and the SST files. The SST files represent mature data and the log represents new data, including delete-operations.</p>\n\n<p>A configurable <b>cache</b> is used to speed up common reads. The cache can potentially be large enough to fit an entire active working set in memory, depending on the application.</p>\n\n<h4 id='string_sorted_table_files_sst'>String Sorted Table files (SST)</h4>\n\n<p>Each SST file is limited to ~2MB, so a large LevelDB store will have many of these files. The SST file is divided internally into 4K <strong>blocks</strong>, each of which can be read in a single operation. The final block is an <strong>index</strong> that points to the start of each data block and its the key of the entry at the start of the block. A <strong>Bloom filter</strong> is used to speed up lookups, allowing a quick scan of an index to find the block that <em>may</em> contain the desired entry.</p>\n\n<p>Keys can have <strong>shared prefixes</strong> within blocks. Any common prefix for keys within a block will be stored once, with subsequent entries storing just the unique suffix. After a fixed number of entries within a block, the shared prefix is <strong>&#8220;reset&#8221;</strong>; much like a keyframe in a video codec. Shared prefixes mean that verbose namespacing of keys does not lead to excessive storage requirements.</p>\n\n<h4 id='table_file_hierarchy'>Table file hierarchy</h4>\n\n<p>The table files are not stored in a simple sequence, rather, they are organised into a series of <strong>levels</strong>. This is the <em>&#8220;Level&#8221;</em> in LevelDB.</p>\n\n<p>Entries that come straight from the log are organised in to Level 0, a set of up to 4 files. When additional entries force Level 0 above the maximum of 4 files, one of the SST files is chosen and merged with the SST files that make up Level 1, which is a set of up to 10MB of files. This process continues, with levels overflowing and one file at a time being merged with the (up to 3) overlapping SST files in the next level. Each level beyond Level 1 is 10 times the size of the previous level.</p>\n<table>\n<tbody>\n<tr>\n<th style='text-align: right; font-weight: bold;'>Log:</th>\n<td style='padding-left: 0.5em;'>Max size of 4MB (configurable), then flushed into a set of Level 0 SST files</td>\n</tr>\n<tr>\n<th style='text-align: right; font-weight: bold;'>Level&nbsp;0:</th>\n<td style='padding-left: 0.5em;'>Max of 4 SST files, then one file compacted into Level 1</td>\n</tr>\n<tr>\n<th style='text-align: right; font-weight: bold;'>Level&nbsp;1:</th>\n<td style='padding-left: 0.5em;'>Max total size of 10MB, then one file compacted into Level 2</td>\n</tr>\n<tr>\n<th style='text-align: right; font-weight: bold;'>Level&nbsp;2:</th>\n<td style='padding-left: 0.5em;'>Max total size of 100MB, then one file compacted into Level 3</td>\n</tr>\n<tr>\n<th style='text-align: right; font-weight: bold;'>Level&nbsp;3+:</th>\n<td style='padding-left: 0.5em;'>Max total size of 10 x previous level, then one file compacted into next level</td>\n</tr>\n</tbody>\n</table>\n<p>0 ↠ 4 SST, 1 ↠ 10M, 2 ↠ 100M, 3 ↠ 1G, 4 ↠ 10G, 5 ↠ 100G, 6 ↠ 1T, 7 ↠ 10T</p>\n\n<p><img src='http://dailyjs.com/images/posts/leveldb_levels.png' alt='Levels' /></p>\n\n<p>This organisation into levels minimises the reorganisation that must take place as new entries are inserted into the middle of a range of keys. Each reorganisation, or &#8220;compaction&#8221;, is restricted to a just a small section of the data store. The hierarchical structure generally leads to data in the higher levels being the most mature data, with the fresher data being stored in the log and the initial levels. Since the initial levels are relatively small, overwriting and removing entries incurs less cost than when it occurs in the higher levels, but this matches the typical database where you have a large set of mature data and a more volatile set of fresh data (of course this is not always the case, so performance will vary for different data write and retrieve patterns).</p>\n\n<p>A <strong>lookup</strong> operation must also traverse the levels to find the required entry. A read operation that requests a given key must first look in the log, if it is not found there it looks in Level 0, moving up to Level 1 and so forth. In this way, a lookup operation incurs a minimum of one read per level that must be searched before finding the required entry. A lookup for a key that does not exist must search every level before a definitive &#8220;NotFound&#8221; can be returned (unless a Del operation is recorded for that key in the log).</p>\n\n<h3 id='advanced_features'>Advanced features</h3>\n\n<ul>\n<li><strong>Batch operations</strong>: provide a collection of Put and/or Del operations that are <strong>atomic</strong>; that is, the <em>whole</em> collection of operations succeed or fail in a single Batch operation.</li>\n\n<li><strong>Bi-directional iterators</strong>: iterators can start at any key in a LevelDB store (even if that key does not exist, it will simply jump to the next lexical key) and can move forward and backwards through the store.</li>\n\n<li><strong>Snapshots</strong>: a snapshot provides a reference to the state of the database at a point in time. Read-queries (Get and iterators) can be made against specific snapshots to retrieve entries as they existed at the time the snapshot was created. Each iterator creates an implicit snapshot (unless it is requested against an explicitly created snapshot). This means that regardless of how long an iterator is alive and active, the data set it operates upon will always be the same as at the time the iterator was created.</li>\n</ul>\n\n<p>Some details on these advanced features will be covered in the next two articles, when we turn to look at how LevelDB can be used to simplify data management in your Node application.</p>\n\n<p>If you&#8217;re keen to learn more and can&#8217;t wait for the next article, see the <a href='https://github.com/rvagg/node-levelup'>LevelUP</a> project on GitHub as this is the focus of much of the LevelDB activity in the Node community at the moment.</p>\n   "}},{"title":"AngularJS: Let's Make a Feed Reader","link":{"href":"http://dailyjs.com/2013/04/18/angularjs-2"},"updated":"2013-04-18T00:00:00+01:00","id":"http://dailyjs.com/2013/04/18/angularjs-2","content":{"type":"html","content":"\n     <ul class='parts'>\n  <li><a href='http://dailyjs.com/2013/04/11/angularjs-1/'>Part 1: Google, Twitter, and AngularJS</a></li>\n  <li><a href='http://dailyjs.com/2013/04/18/angularjs-2/'><strong>Part 2: Let's Make a Feed Reader</strong></a></li>\n  <li><a href='http://dailyjs.com/2013/04/25/angularjs-3/'>Part 3: Rendering Feeds</a></li>\n</ul>\n<p>I&#8217;m looking forward to seeing what services appear to fill Google Reader&#8217;s wake. <a href='http://reederapp.com/reader/'>Reeder</a> and <a href='http://twentyfivesquares.com/press/'>Press</a> are my favourite RSS apps, which I use to curate my sources for upcoming DailyJS content. It sounds like Reeder will support <a href='https://feedbin.me/'>Feedbin</a>, so hopefully Press and other apps will as well. I&#8217;ve also used <a href='http://newsblur.com/'>Newsblur</a> in the past, but I&#8217;m not sure if we&#8217;ll see Newsblur support in Reeder&#8230;</p>\n\n<p>With that in mind, I thought it would be pretty cool to use a feed reader as the AngularJS tutorial series theme. A Bootstrap styled, AngularJS-powered feed reader would look and feel friendly and fast. The main question, however, is how exactly do we download feeds? <a href='http://en.wikipedia.org/wiki/Atom_(standard'>Atom</a> and <a href='http://en.wikipedia.org/wiki/RSS'>RSS</a> feeds aren&#8217;t exactly friendly to client-side developers. What we need is JSON!</p>\n\n<h3 id='jsonp'>JSONP</h3>\n\n<p>The now standard way to fetch feeds in client-side code is to use <a href='http://en.wikipedia.org/wiki/JSONP'>JSONP</a>. That&#8217;s where a remote resource is fetched, usually by inserting a <code>script</code> tag, and the server returns JavaScript wrapped in a callback that the client can run when ready.</p>\n\n<p>I remember reading a post by John Resig many years ago that explained how to use this technique with RSS specifically: <a href='http://ejohn.org/projects/rss2json/'>RSS to JSON Convertor</a>. Ironically, a popular commercial solution for this was provided through Google Reader. Fortunately there&#8217;s another way to do it, this time by Yahoo! &#8211; the Yahoo! Query Language.</p>\n\n<h3 id='yql'>YQL</h3>\n\n<p>The YQL service (<a href='http://info.yahoo.com/legal/us/yahoo/yql/yql-4307.html'>terms of use</a>) is basically SQL for the web. It can be used to fetch and interpret all kinds of resources, including feeds. It has <a href='http://developer.yahoo.com/yql/guide/usage_info_limits.html'>usage limits</a>, so if you want to take this tutorial series to build something more commercially viable then you&#8217;ll want to check those out in detail. Even though the endpoints we&#8217;ll use are &#8220;public&#8221;, Yahoo! will still rate limit them if they go over 2,000 requests per hour. To support higher volume users, API keys can be created.</p>\n\n<p>If you visit <a href='http://developer.yahoo.com/yql/console/?q=select%20*%20from%20xml%20where%20url%3D&apos;http%3A%2F%2Fdailyjs.com%2Fatom.xml&apos;%20and%20itemPath%3D&apos;feed.entry&apos;'>this link</a> you&#8217;ll see a runnable example that converts the DailyJS Atom feed into JSON, wrapped in a callback. The result looks like this:</p>\n<div class='highlight'><pre><code class='javascript'><span class='nx'>cb</span><span class='p'>({</span> <span class='s2'>&quot;query&quot;</span><span class='o'>:</span> <span class='p'>{</span> <span class='cm'>/* loads of JSON! </span> <span class='p'>}</span> <span class='p'>});</span>\n</code></pre>\n</div>\n<p>The <code>cb</code> method will be run from within our fancy AngularJS/Bootstrap client-side code. I wrote about how to build client-side JSONP implementations in <a href='http://dailyjs.com/2010/05/27/framework-part-14/'>Let&#8217;s Make a Framework: Ajax Part 2</a>, so check that out if you&#8217;re interested in that area.</p>\n\n<p>As far as feed processing goes, YQL will give us the JSON we need to make a little feed reader.</p>\n\n<h3 id='yo'>Yo!</h3>\n\n<p>Before you press &#8220;next unread&#8221; in your own feed reader, let&#8217;s jump-start our application with <a href='http://yeoman.io/'>Yeoman</a>. First, install it and Grunt. I assume you already have a recent version of <a href='http://nodejs.org/'>Node</a>, if not get a 0.10.x copy installed and then run the following:</p>\n<div class='highlight'><pre><code class='text'>npm install -g yo grunt-cli bower generator-angular generator-karma\n</code></pre>\n</div>\n<p>Yeoman is based around generators, which are separate modules that you can install using npm. The previous command installed the AngularJS generator, <code>generator-angular</code>.</p>\n\n<p>Next you&#8217;ll need to create a directory for the application to live in:</p>\n<div class='highlight'><pre><code class='text'>mkdir djsreader\ncd djsreader\n</code></pre>\n</div>\n<p>You should also run the <code>angular</code> generator:</p>\n<div class='highlight'><pre><code class='text'>yo angular\n</code></pre>\n</div>\n<p>It will install <em>a lot of stuff</em>, but fortunately most of the modules are ones I&#8217;d use anyway so I&#8217;m cool with that. Answer <code>Y</code> to each question, apart from the one about Compass (I don&#8217;t think I have Compass installed, so I didn&#8217;t want that option).</p>\n\n<p>Run <code>grunt server</code> to see the freshly minted AngularJS-powered app!</p>\n\n<p><img src='http://dailyjs.com/images/posts/yo-angular.png' alt='Hello, AngularJS' /></p>\n\n<p>You may have noticed some &#8220;karma&#8221; files have appeared. That&#8217;s the AngularJS test framework, which you can read about at <a href='http://karma-runner.github.io/'>karma-runner.github.io</a>. If you type <code>grunt test</code>, Grunt will happily trudge through some basic tests that are in <code>test/spec/controllers/main.js</code>.</p>\n\n<h3 id='summary'>Summary</h3>\n\n<p>Welcome to the world of Yeoman, AngularJS, and&#8230; Yahoo!, apparently. The repository for this project is at <a href='https://github.com/alexyoung/djsreader'>alexyoung / djsreader</a>. Come back in a week for the next part!</p>\n   "}}]}}}}

});
*/